import UIKit

protocol IndexPathStorable: AnyObject {
    var indexPath: IndexPath? { get set }
}


extension UIView {
    func screenContext() -> String {
        if let vc = self.parentViewController() {
            return "Screen: \(String(describing: type(of: vc)))"
        }
        return ""
    }
    
    func tableContext() -> String {
        if let tableCell = self.ancestorConforming(to: IndexPathStorable.self),
           let idx = tableCell.indexPath {
            let typeName = String(describing: type(of: tableCell))
            return "\(screenContext()) _ Section \(idx.section) _ Row \(idx.row) _ TableCell \(typeName)"
        }
        return screenContext()
    }
    
    func collectionContext() -> String {
        if let collectionCell = self.ancestorConforming(to: IndexPathStorable.self),
           let idx = collectionCell.indexPath {
            let typeName = String(describing: type(of: collectionCell))
            return "\(tableContext()) _ Item \(idx.item) _ CollectionCell \(typeName)"
        }
        return tableContext()
    }

func tableHeaderContext() -> String {
        if let tableView = self.ancestor(ofType: UITableView.self),
           let headerView = tableView.tableHeaderView,
           headerView.isDescendant(of: self) || self.isDescendant(of: headerView) {
            
            let typeName = String(describing: type(of: headerView))
            return "\(screenContext()) _ TableHeaderView \(typeName)"
        }
        return screenContext()
    }


func tableSectionheaderContext() -> String {
        if let header = self.ancestorConforming(to: SectionStorable.self),
           let section = header.section {
            let typeName = String(describing: type(of: header))
            return "\(screenContext()) _ Header Section \(section) _ HeaderView \(typeName)"
        }
        
        // If it's tableHeaderView (global, no section)
        if let tableView = self.ancestor(ofType: UITableView.self),
           tableView.tableHeaderView?.isDescendant(of: self) == true {
            return "\(screenContext()) _ TableHeaderView"
        }
        
        return screenContext()
    }

    
    // MARK: - Helpers
    private func ancestorConforming<T>(to type: T.Type) -> T? {
        var v: UIView? = self
        while let view = v {
            if let match = view as? T { return match }
            v = view.superview
        }
        return nil
    }

 // MARK: - Helpers
    private func ancestorConforming<T>(to type: T.Type) -> T? {
        var v: UIView? = self
        while let view = v {
            if let match = view as? T { return match }
            v = view.superview
        }
        return nil
    }

    private func parentViewController() -> UIViewController? {
        var responder: UIResponder? = self
        while let r = responder {
            if let vc = r as? UIViewController { return vc }
            responder = r.next
        }
        return nil
    }
}


// MARK: - Automatic Accessibility Context
extension UIView {
    func applyHierarchyAccessibility(prefix: String) {
        self.isAccessibilityElement = true
        self.accessibilityLabel = "\(self.collectionContext()), \(prefix)"
    }
    
    func updateHierarchyAccessibility(suffix: String) {
        if let current = self.accessibilityLabel {
            self.accessibilityLabel = "\(current): \(suffix)"
        }
    }
}

âœ… Step 1 â€” Protocol for Header/Footer
protocol SectionStorable: AnyObject {
    var section: Int? { get set }
}

âœ… Step 2 â€” Custom Header View
class OrdersHeaderView: UIView {
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var dropdownView: UIView!

    func configureAccessibility() {
        titleLabel.accessibilityLabel =
        "\(titleLabel.tableHeaderContext()) _ HeaderLabel: \(titleLabel.text ?? "")"

        dropdownView.accessibilityLabel =
        "\(dropdownView.tableHeaderContext()) _ Dropdown"
    }
}

âœ… Step 3 â€” Assign Section in viewForHeaderInSection
func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
    guard let header = tableView.dequeueReusableHeaderFooterView(withIdentifier: "CustomHeaderView") as? CustomHeaderView else {
        return nil
    }
    header.section = section
    return header
}



âœ… Step 5 â€” Usage in Your Dropdown View
class DropdownView: UIView {
    @IBOutlet weak var selectedLabel: UILabel!
    
    func configureAccessibility() {
        selectedLabel.accessibilityLabel =
        "\(selectedLabel.headerContext()) _ DropdownLabel: \(selectedLabel.text ?? "")"
    }
}



ðŸŽ¤ Example Output

Case 1 â†’ Inside section header (section = 2):

Screen: OrdersViewController _ Header Section 2 _ HeaderView CustomHeaderView _ DropdownLabel: Payment Method


Case 2 â†’ Inside global tableHeaderView:

Screen: OrdersViewController _ TableHeaderView _ DropdownLabel: Filter


how to use :-


// Example CustomView with Button
class PriceView: UIView {
    private let priceButton = UIButton(type: .system)
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        priceButton.setTitle("Price", for: .normal)
        addSubview(priceButton)
        
        // Automatically apply accessibility context
        priceButton.applyHierarchyAccessibility(prefix: "PriceView, Button")
    }
    
    required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") }
    
    override func layoutSubviews() {
        super.layoutSubviews()
        priceButton.frame = bounds
    }
    
    func configure(price: String) {
        priceButton.setTitle(price, for: .normal)
        priceButton.updateHierarchyAccessibility(suffix: price)
    }
}

Out Put :-- Example VoiceOver Output
Example Output for Multiple Table Cells

Suppose the label Shoes is inside:

OrdersViewController

Section 1, Row 0

Table Cell: CustomTableCellB

Collection Item: 2

Collection Cell: CustomCollectionCell

It will produce:

Screen: OrdersViewController _ Section 1 _ Row 0 _ TableCell CustomTableCellB _ Item 2 _ CollectionCell CustomCollectionCell _ Label: Shoes
